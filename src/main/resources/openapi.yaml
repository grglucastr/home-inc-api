openapi: 3.0.3
info:
  title: Home Inc API
  version: '1.0'
paths:
  /v2/expenses:
    get:
      summary: List all expenses
      operationId: getExpenses
      parameters:
        - $ref: "#/components/parameters/expenseFilter"
      tags:
        - Expenses
      responses:
        '200':
          description: Lists all expenses found according to query filter criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseResponse"

    post:
      summary: Add new expense registry
      operationId: postExpenses
      tags:
        - Expenses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRequest"
      responses:
        '201':
          description: Lists all expenses found according to query filter criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"

  /v2/expenses/{expenseId}:
    get:
      summary: Query a single expense by its id.
      operationId: getExpenseById
      parameters:
        - $ref: "#/components/parameters/expenseId"
      tags:
        - Expenses
      responses:
        '200':
          description: Retuns a JSON object of a single expense.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        '404':
          description: Expense not found
    
    patch:
      summary: Update parts of an expense without send the whole object
      operationId: patchExpenses
      parameters:
        - $ref: "#/components/parameters/expenseId"
      tags:
        - Expenses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpensePatchRequest"
      responses:
        '200':
          description: Feedback of the data updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
  /v2/expenses/{expenseId}/pay:
    post:
      summary: Mark expense as paid.
      operationId: payExpense
      parameters:
        - $ref: "#/components/parameters/expenseId"
      tags:
        - Expenses
      responses:
        '200':
          description: Response of a paid expense.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"

  /v2/expenses/{expenseId}/invalidate:
    delete:
      summary: Logical delete of an expense.
      operationId: invalidateExpense
      parameters:
        - $ref: "#/components/parameters/expenseId"
      tags:
        - Expenses
      responses:
        '204':
          description: No content.
        '404':
          description: Expense not found.

  /v2/expenses/mail:
    get:
      summary: Send an e-mail listing all the unpaid expenses
      operationId: sendEmailForUnpaid
      tags:
        - Expenses
      responses:
        200:
          description: Email sent.

  /v2/incomes:
    get:
      summary: List all incomes registered.
      operationId: getIncomes
      tags:
        - Incomes
      responses:
        '200':
          description: List all incomes found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IncomeResponse"
    post:
      summary: Register new income.
      operationId: postNewIncome
      tags:
        - Incomes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomeRequest"
      responses:
        '201':
          description: Income sucessfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"

  /v2/incomes/{incomeId}:
    get:
      summary: Fetch a single income by its id.
      operationId: getIncomeById
      tags:
        - Incomes
      parameters:
        - $ref: "#/components/parameters/incomeId"
      responses:
        '200':
          description: Returns a single object containing details about the income.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        '404':
          description: Income with the given id not found.

    put:
      summary: Update data of an income.
      operationId: updateIncome
      tags:
        - Incomes
      parameters:
        - $ref: "#/components/parameters/incomeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomeRequest"
      responses:
        '200':
          description: Returns an updated version of the income.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        '404':
          description: Income with given id not found.

    delete:
      summary: Logical delete of an income
      operationId: deleteIncome
      parameters:
        - $ref: "#/components/parameters/incomeId"
      tags:
        - Incomes
      responses:
        '204':
          description: Income deleted.
        '404':
          description: Income not found for the given id.

  /v2/incomes/sum:
    get:
      summary: Retrieves the sum of all incomes
      operationId: getSumOfIncomes
      tags:
        - Incomes
      responses:
        '200':
          description: Sum of all incomes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeSumResponse"

  /v2/summary:
    get:
      summary: List the links to get the summary of current month, previous and next month.
      operationId: getSummary
      tags:
        - Summary
      responses:
        '200':
          description: Summary links
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummaryResponse"
  
  /v2/summary/year/{year}/month/{month}:
    get:
      operationId: getSingleSummary
      tags:
        - Summary
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/month"
      responses:
        '200':
          description: Response of a single summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleSummaryResponse"

components:
  parameters:
    expenseId:
      in: path
      name: expenseId
      required: true
      description: The id number of the expense.
      schema:
        type: integer
        minimum: 1
        format: int64
    incomeId:
      in: path
      name: incomeId
      required: true
      description: Income id number.
      schema:
        type: integer
        format: int64
        minimum: 1
    year:
      in: path
      name: year
      required: true
      description: "The number of the year in format yyyy. Example: 2020."
      schema:
        type: integer
        minimum: 1
        format: int32
    month:
      in: path
      name: month
      required: true
      description: The number of the month (1=jan, 2=feb).
      schema:
        type: integer
        minimum: 1
        format: int32
    paid:
      in: query
      description: When true, filter only the paid ones. When false, filter those expenses not paid. On its absence, brings paid and unpaid ones.
      required: false
      name: paid
      schema:
        type: boolean
    expenseFilter:
      in: query
      name: expenseFilter
      description: Filter of expenses
      schema:
        $ref: "#/components/schemas/ExpenseFilter"

  schemas:
    ExpenseFilter:
      description: Filter object for expenses
      type: object
      properties:
        paid:
          type: boolean
        active:
          type: boolean
          default: true
        dueDateStart:
          type: string
          format: date
          example: "2020-03-02"
        dueDateEnd:
          type: string
          format: date
          example: "2020-03-02"
        periodicity:
          type: string
          example: monthly
        paymentMethod:
          type: string
          example: bank transfer
        title:
          type: string
          example: car
    ExpenseRequest:
      description: Request object to add a new expense registry
      type: object
      properties:
        title:
          type: string
          example: COPEL - April 2020
        description:
          type: string
          example: Electricity billl reference to the month of April
        cost:
          type: number
          minimum: 0.0
          maximum: 999999999.99
          example: 53.23
        dueDate:
          type: string
          format: "date"
          example: "2020-04-30"
        paid:
          type: boolean
          default: false
        invoiceDate:
          type: string
          format: "date"
          example: "2020-04-25"
        servicePeriodStart:
          type: string
          format: "date"
          example: "2020-03-25"
        servicePeriodEnd:
          type: string
          format: "date"
          example: "2020-04-25"
        periodicity:
          type: string
          enum: ["just_once", "daily", "weekly", "monthly", "yearly"]
          example: "monthly"
        paymentMethod:
          type: string
          enum: ["cash", "debit card", "credit card", "ticket", "bank transfer", "pix"]
          example: "bank transfer"
        typableLine:
          type: string
          example: 0000.00000 00000.000000 00000.000000 0 00000000000000
    ExpensePatchRequest:
      description: Request object to add a new expense registry
      type: object
      properties:
        title:
          type: string
          example: COPEL - April 2020
        description:
          type: string
          example: Electricity billl reference to the month of April
        cost:
          type: number
          minimum: 0.0
          maximum: 999999999.99
          example: 53.23
        dueDate:
          type: string
          format: "date"
          example: "2020-04-30"
        paid:
          type: boolean
          example: false
        paidDate:
          type: string
          format: "date"
          example: "2020-04-30"
        invoiceDate:
          type: string
          format: "date"
          example: "2020-04-25"
        servicePeriodStart:
          type: string
          format: "date"
          example: "2020-03-25"
        servicePeriodEnd:
          type: string
          format: "date"
          example: "2020-04-25"
        periodicity:
          type: string
          enum: ["just_once", "daily", "weekly", "monthly", "yearly"]
          example: "monthly"
        paymentMethod:
          type: string
          enum: ["cash", "debit card", "credit card", "ticket", "bank transfer", "pix"]
          example: "bank transfer"
        typableLine:
          type: string
          example: 0000.00000 00000.000000 00000.000000 0 00000000000000      
    ExpenseResponse:
      description: Response object on listing all expenses
      type: object
      allOf:
        - $ref: "#/components/schemas/ExpenseRequest"
      properties:
        id:
          type: integer
          format: int64
        isActive:
          type: boolean
          description: True if the expense is deleted
        paidDate:
          type: string
          format: "date"
          example: "2020-04-30"
        insertDateTime:
          type: string
          format: "date-time"
          example: "2020-04-26 08:20:15"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2020-04-30 12:33:29"
        _links:
          type: object
          properties:
            pay:
              type: string
              example: "https://domain.com/v2/expenses/222/pay"
    ExpenseSummary:
      type: object
      description: Schema used in summary report in order to hold the expensive and cheaper bill
      properties:
        value:
          type: number
        expense:
          $ref: "#/components/schemas/ExpenseResponse"
    IncomeRequest:
      description: Request object to handle income
      type: object
      properties:
        amount:
          description: Field to hold the amount of the income
          type: number
          example: 1234.89
          minimum: 0
          maximum: 999999999.99
        description:
          type: string
          maximum: 100
          description: Add a description to specify the origin of this income amount
          example: "Painting service"
        type:
          type: string
          example: MONTHLY
          enum: ["JUST_ONCE", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"]
          description: Inform the frequency of this income amount.
        accountingPeriodStart:
          type: string
          format: date
          description: The date that this income started to be useful.
        accountingPeriodEnd:
          type: string
          format: date
          description: The date that this income started to be desconsidered. When filled, it changes the property of active to false automatically.
        active:
          type: boolean
          description: Inform whether this income stills valid or not.
          default: true
      required: [
          'amount',
          'description',
          'type',
          'accountingPeriodStart'
      ]
    IncomeResponse:
      description: Response object to amount
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Holds the id number of the income
          example: 31232
        amount:
          description: Field to hold the amount of the income
          type: number
          example: 1234.87
        description:
          type: string
          description: Add a description to specify the origin of this income amount
          example: "Monthly salary"
        type:
          type: string
          example: "MONTHLY"
          enum: ["JUST_ONCE", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"]
          description: Inform the frequency of this income amount.
        accountingPeriodStart:
          type: string
          format: date
          description: The date that this income started to be useful.
        accountingPeriodEnd:
          type: string
          format: date
          description: The date that this income started to be desconsidered.
        active:
          type: boolean
          description: True if this income stills being used for calculations. False if this income is not considered anymore.
        insertDate:
          type: string
          format: date
          description: Holds the date it was inserted. This field is also used in calculations of month summary.
        updateDate:
          type: string
          format: date
          description: Holds the date it was updated. This field is also used in calculations of month summary.
    IncomeSumResponse:
      type: object
      description: Contains the sum of all incomes by considering all active incomes.
      properties:
        total:
          type: number
    SummaryResponse:
      type: object
      description: Contains the links to show the summary for the current, previous and next month
      properties:
          previousMonth:
            type: string
            description: Request for the detailed summary of previous month.
            example: "https://domain.com/v2/summary/year/2019/month/12"
          currentMonth:
            type: string
            description: Request for the detailed summary of current month.
            example: "https://domain.com/v2/summary/year/2020/month/1"
          nextMonth:
            type: string
            description: Request for the detailed summary of next month.
            example: "https://domain.com/v2/summary/year/2020/month/2"
    SingleSummaryResponse:
      type: object
      description: Response summary containing the max, min and sum of values of all expenses according to criteria.
      properties:
        monthlyProgress:
          type: string
          description: Shows monthly progress percentage.
          example: "45%"
        min:
          $ref: "#/components/schemas/ExpenseSummary"
        max:
          $ref: "#/components/schemas/ExpenseSummary"
        count:
          type: integer
          format: int32
          description: Holds the quantity of exepenses found according to the filter criteria.
          example: 22
        average:
          type: number
          description: Holds the average spended in the month.
          example: 123.45
        total:
          type: number
          description: Hold the sum of all bills of the month.
          example: 3900.44
        totalPaid:
          type: number
          description: Hold the sum of all paid bills of the month.
          example: 1234.45
        totalToPay:
          type: number
          description: Hold the sum of all bills pending to pay of the month.
          example: 1234.43
        monthlyIncome:
          type: number
          description: Hold the sum of all incomes to the given month
          example: 15123.90
        previousMonth:
            type: string
            description: Request for the detailed summary of previous month.
            example: "https://domain.com/v2/summary/year/2019/month/12"
        nextMonth:
            type: string
            description: Request for the detailed summary of next month.
            example: "https://domain.com/v2/summary/year/2020/month/2"