openapi: 3.0.3
info:
  title: Home Inc API
  version: '3.0'

servers:
  - url: http://localhost:8080/
    description: Local server for testing
  - url: http://44.198.99.95
    description: Production server
paths:
  
  /v3/users/{userId}/spending-categories:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      summary: List all the spending categories for a specific user
      operationId: getSpendingCategories
      tags:
        - "Spending Categories"
      responses:
        200:
          description: A pageable list of spending categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpendingCategoryResponse"
        404:
          description: When the user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPUserNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
    post:
      summary: Add new spending category
      operationId: postSpendingCategory
      tags:
        - "Spending Categories"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpendingCategoryRequest"
      responses:
        201:
          description: A brand new spending category containing its ID and inserted date time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpendingCategoryResponse"
        404:
          description: When the user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPUserNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
        
  /v3/users/{userId}/income-categories:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      summary: List all the income categories registered for a specific user
      operationId: getIncomeCategories
      tags:
        - "Income Categories"
      responses:
        200:
          description: A pageable list showing all income categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IncomeCategoryResponse"
        404:
          description: When the user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPUserNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"

    post:
      summary: Add new income category
      operationId: postIncomeCategory
      tags:
        - "Income Categories"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomeCategoryRequest"
      responses:
        201:
          description: Brings the Income Category with its ID, inserted date time and all the information submitted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeCategoryResponse"
        404:
          description: When the user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPUserNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"

  /v3/users/{userId}/payment-types:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      summary: List all Payment Types
      operationId: getPaymentTypes
      tags:
        - "Payment Types"
      responses:
        200:
          description: A pageable list with all the payment types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentTypeResponse"
        404:
          description: When the user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPUserNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
    post:
      summary: Add new payment type
      operationId: postPaymentType
      tags:
        - "Payment Types"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentTypeRequest"
      responses:
        201:
          description: A brand new added payment type with its ID and inserted date time.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/PaymentTypeResponse"
        404:
          description: When the user is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPUserNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
   
  /v3/spending-categories/{spendingCategoryId}/spendings:
    parameters:
      - $ref: "#/components/parameters/spendingCategoryId"
    get:
      summary: List all spendings
      operationId: getSpendings
      tags:
        - Spendings
      responses:
        200:
          description: A pageable list showing all spendings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpendingResponse"
        404:
          description: When the spending category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPSpendingCategoryNotFoundResponse"
        
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
    post:
      summary: Add new spending
      operationId: postSpending
      tags:
        - "Spendings"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpendingRequest"
      responses:
          201:
            description: Returns a recently added spending with its ID, inserted date time and all the submitted information. 
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SpendingResponse"
          404:
            description: When the spending category is not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/HTTPSpendingCategoryNotFoundResponse"
          500:
            description: When some problems in the server occurs, such as DB is down.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/HTTPBaseResponse"
  
  /v3/income-categories/{incomeCategoryId}/incomes:
    parameters:
      - $ref: "#/components/parameters/incomeCategoryId"
    get:
      summary: List all the incomes registered for a specific user
      operationId: getIncomes
      tags:
        - "Incomes"
      responses:
        200:
          description: A pageable list showing all incomes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IncomeResponse"
        404:
          description: When the income category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPIncomeCategoryNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
    post:
      summary: Add new income
      operationId: postIncome
      tags:
        - "Incomes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomeRequest"
      responses:
        201:
          description: Returns the new income added with its ID and inserted date time and all the others information submitted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeResponse"
        404:
          description: When the income category is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPIncomeCategoryNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"

  /v3/spendings/{spendingId}/ledgers:
    parameters:
      - $ref: "#/components/parameters/spendingId"
    get:
      summary: List all the ledger for specific spending id informed in path parameter.
      operationId: getLedgers
      tags:
        - "Ledgers"
      responses:
        200:
          description: A pageable list of ledgers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LedgerResponse"
        404:
          description: When the spending is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPSpendingNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
        
    post:
      summary: Add new register to the ledger for the spending id inform in path parameter.
      operationId: postLedger
      tags:
        - "Ledgers"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LedgerRequest"
      responses:
        201:
          description: Returns a brand new added register to the ledger with its Id and inserted date time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Base"
        404:
          description: When the spending is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPSpendingNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"

  /v3/ledgers/{ledgerId}/fund-details:
    parameters:
      - $ref: "#/components/parameters/ledgerId"
    get:
      summary: List all fund details based on ledger id informed in path parameter.
      operationId: getFundDetails
      tags:
        - "Fund Details"
      responses:
        200:
          description: A pageable list of fund details
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/FundDetailResponse"
        404:
          description: When the ledger is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPLedgerNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"
    
    post:
      summary: Add a new register of fund detail based on the spending id passed in the path parameter.
      operationId: postFundDetail
      tags:
        - "Fund Details"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FundDetailRequest"
      responses:
        201:
          description: Returns a brand new fund detail with its id and insert date time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FundDetailResponse"
        404:
          description: When the ledger is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPLedgerNotFoundResponse"
        500:
          description: When some problems in the server occurs, such as DB is down.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPBaseResponse"

components:
  schemas:

    Base:
      type: object        
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        
    UserResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        name:
          type: string
          example: "George Sanches"
        email:
          type: string
          example: "george.sanches@domain.com"

    SpendingRequest:
      type: object
      properties:
        name:
          type: string
          example: "Copel"
        installments:
          type: integer
          format: int32
          description: Field used to inform the number of installments of the spending, if applied.
        description:
          type: string
          example: "Electric bill"
        currencyCode:
          type: string
          example: "BRL"
        periodicity:
          type: string
          example: "MONTHLY"
          enum: ["LOOSE", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "FIXED_MONTHS"]
        fixedIncomeFund:
          $ref: "#/components/schemas/FixedIncomeFundRequest"

    SpendingResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        name:
          type: string
          example: "Copel"
        installments:
          type: integer
          format: int32
          description: Field used to inform the number of installments of the spending, if applied.
        description:
          type: string
          example: "Electric bill"
        currencyCode:
          type: string
          example: "BRL"
        periodicity:
          type: string
          example: "MONTHLY"
          enum: ["LOOSE", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "FIXED_MONTHS"]
        fixedIncomeFund:
          $ref: "#/components/schemas/FixedIncomeFundRequest"

    
    IncomeRequest:
      type: object
      properties:
        name:
          type: string
          example: "Salary"
        amount:
          type: number
          example: 2500.33
        category:
          type: string
          example: "Salary"
        currencyCode:
          type: string
          example: "BRL"
        periodicity:
          type: string
          example: "MONTHLY"
          enum: ["LOOSE", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "FIXED_MONTHS"]
      
    IncomeResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        name:
          type: string
          example: "Salary"
        amount:
          type: number
          example: 2500.33
        category:
          type: string
          example: "Salary"
        currencyCode:
          type: string
          example: "BRL"
        periodicity:
          type: string
          example: "MONTHLY"
          enum: ["LOOSE", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "FIXED_MONTHS"]

    IncomeCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Overtime"
    
    IncomeCategoryResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        name:
          type: string
          example: "Overtime"
    
    SpendingCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Electricity|Investments"

    SpendingCategoryResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        name:
          type: string
          example: "Electricity"


    PaymentTypeRequest:
      type: object
      properties:
        name:
          type: string
          example: Bank Transfer

    PaymentTypeResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        name:
          type: string
          example: Bank Transfer

    FixedIncomeFundRequest:
      type: object
      properties:
        dueDate:
          type: string
          format: "date"
          example: "2025-09-30"
        annualProfitabilityPercentage:
          type: number
          example: 12.3
        productPrice:
          type: number
          example: 170.34
        minAmountAllowed:
          type: number
          example: 33.54
    
    LedgerRequest:
      type: object
      properties:
        paymentTypeId:
          description: Id of the payment type
          type: integer
          format: int64
          example: 1
        billingDate:
          description: Date that the invoice was received by E-mail
          type: string
          format: "date"
          example: "2033-10-11"
        dueDate:
          description: Limit date bill should be paid
          type: string
          format: "date"
          example: "2033-10-11"
        amountDue:
          description: Value that should be paid
          type: number
          example: 1234.22
        barCode:
          type: string
          example: 836800000009 672801110004 001010202230 533649207040
        QRCode:
          description: Field for Pix QRCodes
          type: string
          example: ""
        paid:
          description: Switch variable to control if this expense is paid or not.
          default: false
          type: boolean
        
    LedgerResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        paymentTypeId:
          description: Payment type
          type: string
          example: "Bank Transfer"
        billingDate:
          description: Date that the invoice was received by E-mail
          type: string
          format: "date"
          example: "2033-10-11"
        dueDate:
          description: Limit date bill should be paid
          type: string
          format: "date"
          example: "2033-10-11"
        amountDue:
          description: Value that should be paid
          type: number
          example: 1234.22
        barCode:
          type: string
          example: 836800000009 672801110004 001010202230 533649207040
        QRCode:
          description: Field for Pix QRCodes
          type: string
          example: ""
        paid:
          description: Switch variable to control if this expense is paid or not.
          default: false
          type: boolean

    FundDetailRequest:
      type: object
      properties:
        lastYieldAmount: 
          type: number
          example: 1.10
        dividendYield:
          type: number
          example: 0.66
        stockPrice:
          type: number
          example: 169.39
        quantity:
          type: integer
          format: int32
          example: 1
        pvp:
          type: number
          example: 1.15
    
    FundDetailResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 222
        active:
          type: boolean
          default: true
          description: Field used for logical delete
        insertDateTime:
          type: string
          format: "date-time"
          example: "2035-09-10 14:21:34"
        updateDateTime:
          type: string
          format: "date-time"
          example: "2035-09-15 21:42:32"
        lastYieldAmount: 
          type: number
          example: 1.10
        dividendYield:
          type: number
          example: 0.66
        stockPrice:
          type: number
          example: 169.39
        quantity:
          type: integer
          format: int32
          example: 1
        pvp:
          type: number
          example: 1.15
      

    HTTPBaseResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: ""
    
    HTTPUserNotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          example: "User not found."
    
    HTTPSpendingCategoryNotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Spending Category not found."

    HTTPIncomeCategoryNotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Income Category not found."

    HTTPPaymentTypeNotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Payment Type not found."

    HTTPSpendingNotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Spending not found."
    
    HTTPLedgerNotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Ledger not found."

  parameters:
    
    userId:
      in: path
      name: userId
      required: true
      description: User id. Integer value.
      schema:
        type: integer
        minimum: 1
        format: int64
    
    spendingCategoryId:
      in: path
      name: spendingCategoryId
      required: true
      description: Spending Category ID. Integer value.
      schema:
        type: integer
        minimum: 1
        format: int64
    
    incomeCategoryId:
      in: path
      name: incomeCategoryId
      required: true
      description: Income Category ID. Integer value.
      schema:
        type: integer
        minimum: 1
        format: int64
    
    spendingId:
      in: path
      name: spendingId
      required: true
      description: Spending id. Integer value.
      schema:
        type: integer
        minimum: 1
        format: int64
    
    ledgerId:
      in: path
      name: ledgerId
      required: true
      description: Ledger id. Integer value.
      schema:
        type: integer
        minimum: 1
        format: int64